name: ArgoCD Sync

on:
  push:
    branches: [ main ]
    paths:
      - 'k8s-gcp/argocd/**'
  workflow_dispatch:
    inputs:
      IMAGE_TAG:
        description: 'Docker image tag to sync'
        required: true
        type: string
      ENVIRONMENT:
        description: 'Environment to sync (dev/prod)'
        required: false
        type: string
        default: 'dev'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: asia-northeast3
  GKE_CLUSTER_NAME: microservices-cluster
  NAMESPACE: microservices

jobs:
  argocd-sync:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Get GKE credentials
        run: |
          set -euo pipefail
          gcloud container clusters get-credentials "${GKE_CLUSTER_NAME}" --region "${GCP_REGION}" --project "${GCP_PROJECT_ID}"

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          argocd version --client

      - name: Ensure SA and get token
        run: |
          set -euo pipefail
          kubectl -n argocd create sa argocd-manager --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n argocd create rolebinding argocd-manager-binding --clusterrole=admin --serviceaccount=argocd:argocd-manager --dry-run=client -o yaml | kubectl apply -f -
          echo "ARGOCD_TOKEN=$(kubectl -n argocd create token argocd-manager)" >> "$GITHUB_ENV"

      - name: Get ArgoCD server endpoint
        id: endpoint
        run: |
          set -euo pipefail
          IP="$(kubectl -n argocd get svc argocd-server-lb -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)"
          HOST="$(kubectl -n argocd get svc argocd-server-lb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)"
          PORT="$(kubectl -n argocd get svc argocd-server-lb -o jsonpath='{.spec.ports[0].port}' 2>/dev/null || echo 80)"
          if [ -n "$HOST" ]; then ENDPOINT="$HOST"; else ENDPOINT="$IP"; fi
          if [ -z "$ENDPOINT" ]; then exit 1; fi
          echo "ARGOCD_SERVER=${ENDPOINT}:${PORT}" >> "$GITHUB_ENV"
          if [ "$PORT" = "80" ]; then
            echo "ARGOCD_FLAGS=--insecure --plaintext" >> "$GITHUB_ENV"
          else
            echo "ARGOCD_FLAGS=--insecure --grpc-web" >> "$GITHUB_ENV"
          fi

      # 토큰 로그인 (위 단계에서 생성/주입된 ARGOCD_TOKEN 사용)
      - name: Login to ArgoCD (token)
        run: |
          set -euo pipefail
          timeout 30s argocd login "$ARGOCD_SERVER" $ARGOCD_FLAGS \
            --auth-token "$ARGOCD_TOKEN"


      - name: Update Application with new image tag
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.ENVIRONMENT || 'dev' }}"
          APP_NAME="user-service-${ENV}"
          TAG="${{ github.event.inputs.IMAGE_TAG }}"
          argocd $ARGOCD_FLAGS --auth-token "$ARGOCD_TOKEN" app set "${APP_NAME}" --helm-set image.tag="${TAG}"

      - name: Sync Application
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.ENVIRONMENT || 'dev' }}"
          APP_NAME="user-service-${ENV}"
          argocd $ARGOCD_FLAGS --auth-token "$ARGOCD_TOKEN" app sync "${APP_NAME}" --force

      - name: Wait for sync completion
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.ENVIRONMENT || 'dev' }}"
          APP_NAME="user-service-${ENV}"
          argocd $ARGOCD_FLAGS --auth-token "$ARGOCD_TOKEN" app wait "${APP_NAME}" --timeout 300

      - name: Get application status
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.ENVIRONMENT || 'dev' }}"
          APP_NAME="user-service-${ENV}"
          argocd $ARGOCD_FLAGS --auth-token "$ARGOCD_TOKEN" app get "${APP_NAME}"
