# apiVersion은 리소스의 API 그룹/버전을 나타냅니다.
apiVersion: apps/v1
# kind는 생성하려는 리소스의 종류입니다. 여기서는 Deployment입니다.
kind: Deployment
metadata:
  # 리소스의 이름
  name: user-service
  labels:
    app: user-service              # 공통 선택/분류에 사용할 라벨
    version: v1                    # 버전 라벨(선택)
spec:
  replicas: 1                      # 테스트용으로 1개 파드만
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1            # 롤링 업데이트 중 동시에 내려갈 수 있는 파드 수
      maxSurge: 1                  # 롤링 업데이트 중 동시에 추가 생성할 수 있는 파드 수
  selector:
    matchLabels:
      app: user-service            # 이 라벨을 가진 파드를 이 Deployment가 관리
  template:
    metadata:
      labels:
        app: user-service
        version: v1
    spec:
      serviceAccountName: gke-sa   # 파드에서 사용할 K8s 서비스계정(Workload Identity 연동)
      containers:
      - name: user-service
        image: asia-northeast3-docker.pkg.dev/mong-gcp/microservices/user-service:7d8cd524c374f1bfedd1fee5f10bac3910e9dc99
        ports:
        - containerPort: 8080      # 애플리케이션 리스닝 포트
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "dev"             # Spring 프로파일
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: FIRESTORE_PROJECT_ID
          value: "mong-gcp"
        - name: PUBSUB_PROJECT_ID
          value: "mong-gcp"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              name: smtp-secret
              key: username
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smtp-secret
              key: password
        - name: MONGODB_URI
          value: "mongodb://admin:password@mongodb-service:27017/user_db?authSource=admin"
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        # MySQL 환경변수 추가 (ConfigMap에서 사용)
        - name: MYSQL_HOST
          value: "10.37.0.3"
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_DATABASE
          value: "user_db"
        - name: RDB_URL
          value: "jdbc:mysql://10.3.202.113:3306/mong?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true"
        - name: RDB_USERNAME
          value: "root"
        - name: RDB_PASSWORD
          value: "rlarudrb119"
        resources:
          requests:
            memory: "512Mi"       # 최소 확보할 리소스
            cpu: "250m"
          limits:
            memory: "1Gi"         # 상한(Autopilot 과금 기준)
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /v3/api-docs
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume       # ConfigMap을 읽기 전용으로 마운트
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: user-service-config # 같은 네임스페이스의 ConfigMap 이름
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - user-service
              topologyKey: kubernetes.io/hostname
